{"ast":null,"code":"import _classCallCheck from \"/home/artem/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/yandex/homework/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/artem/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/yandex/homework/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Note =\n/*#__PURE__*/\nfunction () {\n  function Note(data) {\n    _classCallCheck(this, Note);\n\n    this.currentData = void 0;\n    this.currentData = data;\n  }\n\n  _createClass(Note, [{\n    key: \"data\",\n    get: function get() {\n      return this.currentData;\n    }\n  }]);\n\n  return Note;\n}();\n\nvar _Symbol$iterator = Symbol.iterator;\nexport var Notes =\n/*#__PURE__*/\nfunction () {\n  _createClass(Notes, null, [{\n    key: \"factory\",\n    value: function factory(Instance, data) {\n      Instance.notes = Instance.notes || [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var element = _step.value;\n          Instance.addNote(element);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  function Notes() {\n    _classCallCheck(this, Notes);\n\n    this.notes = void 0;\n\n    this.getNoteSize = function () {\n      /****not implemented****/\n    };\n\n    this.notes = [];\n  }\n\n  _createClass(Notes, [{\n    key: \"addNote\",\n    value: function addNote(data) {\n      this.notes.push(new Note(data));\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.notes;\n    }\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      var arr = [];\n\n      for (var i = 0; i < this.notes.length; i++) {\n        arr.push(callback(this.notes[i], i, this.notes));\n      }\n\n      return arr;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this.notes.values();\n    }\n  }]);\n\n  return Notes;\n}();","map":{"version":3,"sources":["/home/artem/Документы/yandex/homework/client/src/componenets/App/Notes.ts"],"names":["Note","data","currentData","Symbol","iterator","Notes","Instance","notes","element","addNote","getNoteSize","push","callback","arr","i","length","values"],"mappings":";;;IA0BMA,I;;;AAGF,gBAAYC,IAAZ,EAA4B;AAAA;;AAAA,SAFpBC,WAEoB;AACxB,SAAKA,WAAL,GAAmBD,IAAnB;AACH;;;;wBACoB;AACjB,aAAO,KAAKC,WAAZ;AACH;;;;;;uBAgCOC,MAAM,CAACC,Q;AA7BnB,WAAaC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,4BAC0BC,QAD1B,EAC2CL,IAD3C,EAC6D;AACrDK,MAAAA,QAAQ,CAACC,KAAT,GAAiBD,QAAQ,CAACC,KAAT,IAAkB,EAAnC;AADqD;AAAA;AAAA;;AAAA;AAErD,6BAAsBN,IAAtB,8HAA4B;AAAA,cAAjBO,OAAiB;AACxBF,UAAAA,QAAQ,CAACG,OAAT,CAAiBD,OAAjB;AACH;AAJoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKxD;AANL;;AASI,mBAAc;AAAA;;AAAA,SAFND,KAEM;;AAAA,SAwBNG,WAxBM,GAwBQ,YAAM;AACxB;AACH,KA1Ba;;AACV,SAAKH,KAAL,GAAa,EAAb;AACH;;AAXL;AAAA;AAAA,4BAamBN,IAbnB,EAamC;AAC3B,WAAKM,KAAL,CAAWI,IAAX,CAAgB,IAAIX,IAAJ,CAASC,IAAT,CAAhB;AACH;AAfL;AAAA;AAAA,8BAiBqB;AACb,aAAO,KAAKM,KAAZ;AACH;AAnBL;AAAA;AAAA,wBAqBeK,QArBf,EAqByF;AACjF,UAAMC,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,KAAL,CAAWQ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCD,QAAAA,GAAG,CAACF,IAAJ,CAASC,QAAQ,CAAC,KAAKL,KAAL,CAAWO,CAAX,CAAD,EAAgBA,CAAhB,EAAmB,KAAKP,KAAxB,CAAjB;AACH;;AACD,aAAOM,GAAP;AACH;AA3BL;AAAA;AAAA,4BA6B+B;AACvB,aAAO,KAAKN,KAAL,CAAWS,MAAX,EAAP;AACH;AA/BL;;AAAA;AAAA","sourcesContent":["import {NoteInterface} from \"../Note\";\n\nexport interface NoteData {\n    type: string;\n    title?: string;\n    tags?: number[];\n    color?: number;\n    items?: Item[];\n    size: string;\n    created: number;\n    text?: string;\n    attachments?: Attachment[];\n    reminder?: number;\n    url?: string;\n}\n\nexport interface Attachment {\n    type: string;\n    url: string;\n}\n\nexport interface Item {\n    text: string;\n    checked: boolean;\n}\n\nclass Note {\n    private currentData: NoteData;\n\n    constructor(data: NoteData) {\n        this.currentData = data;\n    }\n    get data(): NoteData {\n        return this.currentData;\n    }\n}\n\nexport class Notes {\n    public static factory(Instance: Notes, data: NoteData[]) {\n        Instance.notes = Instance.notes || [];\n        for (const element of data) {\n            Instance.addNote(element);\n        }\n    }\n    private notes: Note[];\n\n    constructor() {\n        this.notes = [];\n    }\n\n    public addNote(data: NoteData) {\n        this.notes.push(new Note(data));\n    }\n\n    public toArray() {\n        return this.notes;\n    }\n\n    public map(callback: (item?: Note, index?: number, array?: Note[]) => NoteInterface) {\n        const arr = [];\n        for (let i = 0; i < this.notes.length; i++) {\n            arr.push(callback(this.notes[i], i, this.notes));\n        }\n        return arr;\n    }\n\n    public [Symbol.iterator]() {\n        return this.notes.values();\n    }\n\n    private getNoteSize = () => {\n        /****not implemented****/\n    }\n}\n"]},"metadata":{},"sourceType":"module"}